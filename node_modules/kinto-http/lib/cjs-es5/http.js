"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var errors_1 = require("./errors");
/**
 * Enhanced HTTP client for the Kinto protocol.
 * @private
 */
var HTTP = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {EventEmitter} events                       The event handler.
     * @param {Object}       [options={}}                 The options object.
     * @param {Number}       [options.timeout=null]       The request timeout in ms, if any (default: `null`).
     * @param {String}       [options.requestMode="cors"] The HTTP request mode (default: `"cors"`).
     */
    function HTTP(events, options) {
        if (options === void 0) { options = {}; }
        // public properties
        /**
         * The event emitter instance.
         * @type {EventEmitter}
         */
        if (!events) {
            throw new Error("No events handler provided");
        }
        this.events = events;
        /**
         * The request mode.
         * @see  https://fetch.spec.whatwg.org/#requestmode
         * @type {String}
         */
        this.requestMode = options.requestMode || HTTP.defaultOptions.requestMode;
        /**
         * The request timeout.
         * @type {Number}
         */
        this.timeout = options.timeout || HTTP.defaultOptions.timeout;
    }
    Object.defineProperty(HTTP, "DEFAULT_REQUEST_HEADERS", {
        /**
         * Default HTTP request headers applied to each outgoing request.
         *
         * @type {Object}
         */
        get: function () {
            return {
                Accept: "application/json",
                "Content-Type": "application/json",
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HTTP, "defaultOptions", {
        /**
         * Default options.
         *
         * @type {Object}
         */
        get: function () {
            return { timeout: null, requestMode: "cors" };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     */
    HTTP.prototype.timedFetch = function (url, options) {
        var _this = this;
        var hasTimedout = false;
        return new Promise(function (resolve, reject) {
            // Detect if a request has timed out.
            var _timeoutId;
            if (_this.timeout) {
                _timeoutId = setTimeout(function () {
                    hasTimedout = true;
                    if (options && options.headers) {
                        options = __assign({}, options, { headers: utils_1.obscureAuthorizationHeader(options.headers) });
                    }
                    reject(new errors_1.NetworkTimeoutError(url, options));
                }, _this.timeout);
            }
            function proceedWithHandler(fn) {
                return function (arg) {
                    if (!hasTimedout) {
                        if (_timeoutId) {
                            clearTimeout(_timeoutId);
                        }
                        fn(arg);
                    }
                };
            }
            fetch(url, options)
                .then(proceedWithHandler(resolve))
                .catch(proceedWithHandler(reject));
        });
    };
    /**
     * @private
     */
    HTTP.prototype.processResponse = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var status, headers, text, json;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        status = response.status, headers = response.headers;
                        return [4 /*yield*/, response.text()];
                    case 1:
                        text = _a.sent();
                        if (text.length !== 0) {
                            try {
                                json = JSON.parse(text);
                            }
                            catch (err) {
                                throw new errors_1.UnparseableResponseError(response, text, err);
                            }
                        }
                        if (status >= 400) {
                            throw new errors_1.ServerResponse(response, json);
                        }
                        return [2 /*return*/, { status: status, json: json, headers: headers }];
                }
            });
        });
    };
    /**
     * @private
     */
    HTTP.prototype.retry = function (url, retryAfter, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_1.delay(retryAfter)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.request(url, request, __assign({}, options, { retry: options.retry - 1 }))];
                }
            });
        });
    };
    /**
     * Performs an HTTP request to the Kinto server.
     *
     * Resolves with an objet containing the following HTTP response properties:
     * - `{Number}  status`  The HTTP status code.
     * - `{Object}  json`    The JSON response body.
     * - `{Headers} headers` The response headers object; see the ES6 fetch() spec.
     *
     * @param  {String} url               The URL.
     * @param  {Object} [request={}]      The request object, passed to
     *     fetch() as its options object.
     * @param  {Object} [request.headers] The request headers object (default: {})
     * @param  {Object} [options={}]      Options for making the
     *     request
     * @param  {Number} [options.retry]   Number of retries (default: 0)
     * @return {Promise}
     */
    HTTP.prototype.request = function (url, request, options) {
        if (request === void 0) { request = { headers: {} }; }
        if (options === void 0) { options = { retry: 0 }; }
        return __awaiter(this, void 0, void 0, function () {
            var response, headers, retryAfter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Ensure default request headers are always set
                        request.headers = __assign({}, HTTP.DEFAULT_REQUEST_HEADERS, request.headers);
                        // If a multipart body is provided, remove any custom Content-Type header as
                        // the fetch() implementation will add the correct one for us.
                        if (request.body && request.body instanceof FormData) {
                            if (request.headers instanceof Headers) {
                                request.headers.delete("Content-Type");
                            }
                            else if (!Array.isArray(request.headers)) {
                                delete request.headers["Content-Type"];
                            }
                        }
                        request.mode = this.requestMode;
                        return [4 /*yield*/, this.timedFetch(url, request)];
                    case 1:
                        response = _a.sent();
                        headers = response.headers;
                        this._checkForDeprecationHeader(headers);
                        this._checkForBackoffHeader(headers);
                        retryAfter = this._checkForRetryAfterHeader(headers);
                        // If number of allowed of retries is not exhausted, retry the same request.
                        if (retryAfter && options.retry > 0) {
                            return [2 /*return*/, this.retry(url, retryAfter, request, options)];
                        }
                        else {
                            return [2 /*return*/, this.processResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    HTTP.prototype._checkForDeprecationHeader = function (headers) {
        var alertHeader = headers.get("Alert");
        if (!alertHeader) {
            return;
        }
        var alert;
        try {
            alert = JSON.parse(alertHeader);
        }
        catch (err) {
            console.warn("Unable to parse Alert header message", alertHeader);
            return;
        }
        console.warn(alert.message, alert.url);
        this.events.emit("deprecated", alert);
    };
    HTTP.prototype._checkForBackoffHeader = function (headers) {
        var backoffMs;
        var backoffHeader = headers.get("Backoff");
        var backoffSeconds = backoffHeader ? parseInt(backoffHeader, 10) : 0;
        if (backoffSeconds > 0) {
            backoffMs = new Date().getTime() + backoffSeconds * 1000;
        }
        else {
            backoffMs = 0;
        }
        this.events.emit("backoff", backoffMs);
    };
    HTTP.prototype._checkForRetryAfterHeader = function (headers) {
        var retryAfter = headers.get("Retry-After");
        if (!retryAfter) {
            return;
        }
        var delay = parseInt(retryAfter, 10) * 1000;
        var tryAgainAfter = new Date().getTime() + delay;
        this.events.emit("retry-after", tryAgainAfter);
        return delay;
    };
    return HTTP;
}());
exports.default = HTTP;
