"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var v4_1 = __importDefault(require("uuid/v4"));
var utils_1 = require("./utils");
var requests = __importStar(require("./requests"));
var endpoint_1 = __importDefault(require("./endpoint"));
var utils_2 = require("./utils");
/**
 * Abstract representation of a selected collection.
 *
 */
var Collection = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param  {KintoClient}  client            The client instance.
     * @param  {Bucket}       bucket            The bucket instance.
     * @param  {String}       name              The collection name.
     * @param  {Object}       [options={}]      The options object.
     * @param  {Object}       [options.headers] The headers object option.
     * @param  {Boolean}      [options.safe]    The safe option.
     * @param  {Number}       [options.retry]   The retry option.
     * @param  {Boolean}      [options.batch]   (Private) Whether this
     *     Collection is operating as part of a batch.
     */
    function Collection(client, bucket, name, options) {
        if (options === void 0) { options = {}; }
        /**
         * @ignore
         */
        this.client = client;
        /**
         * @ignore
         */
        this.bucket = bucket;
        /**
         * The collection name.
         * @type {String}
         */
        this.name = name;
        /**
         * @ignore
         */
        this._isBatch = !!options.batch;
        /**
         * @ignore
         */
        this._retry = options.retry || 0;
        this._safe = !!options.safe;
        // FIXME: This is kind of ugly; shouldn't the bucket be responsible
        // for doing the merge?
        this._headers = __assign({}, this.bucket._headers, options.headers);
    }
    /**
     * Get the value of "headers" for a given request, merging the
     * per-request headers with our own "default" headers.
     *
     * @private
     */
    Collection.prototype._getHeaders = function (options) {
        return __assign({}, this._headers, options.headers);
    };
    /**
     * Get the value of "safe" for a given request, using the
     * per-request option if present or falling back to our default
     * otherwise.
     *
     * @private
     * @param {Object} options The options for a request.
     * @returns {Boolean}
     */
    Collection.prototype._getSafe = function (options) {
        return __assign({ safe: this._safe }, options).safe;
    };
    /**
     * As _getSafe, but for "retry".
     *
     * @private
     */
    Collection.prototype._getRetry = function (options) {
        return __assign({ retry: this._retry }, options).retry;
    };
    /**
     * Retrieves the total number of records in this collection.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Number, Error>}
     */
    Collection.prototype.getTotalRecords = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = endpoint_1.default.record(this.bucket.name, this.name);
                        request = {
                            headers: this._getHeaders(options),
                            path: path,
                            method: "HEAD",
                        };
                        return [4 /*yield*/, this.client.execute(request, {
                                raw: true,
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        headers = (_a.sent()).headers;
                        return [2 /*return*/, parseInt(headers.get("Total-Records"), 10)];
                }
            });
        });
    };
    /**
     * Retrieves the ETag of the records list, for use with the `since` filtering option.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<String, Error>}
     */
    Collection.prototype.getRecordsTimestamp = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = endpoint_1.default.record(this.bucket.name, this.name);
                        request = {
                            headers: this._getHeaders(options),
                            path: path,
                            method: "HEAD",
                        };
                        return [4 /*yield*/, this.client.execute(request, {
                                raw: true,
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        headers = (_a.sent()).headers;
                        return [2 /*return*/, headers.get("ETag")];
                }
            });
        });
    };
    /**
     * Retrieves collection data.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Object} [options.query]   Query parameters to pass in
     *     the request. This might be useful for features that aren't
     *     yet supported by this library.
     * @param  {Array}  [options.fields]  Limit response to
     *     just some fields.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.getData = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = endpoint_1.default.collection(this.bucket.name, this.name);
                        path = utils_2.addEndpointOptions(path, options);
                        request = { headers: this._getHeaders(options), path: path };
                        return [4 /*yield*/, this.client.execute(request, {
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Set collection data.
     * @param  {Object}   data                    The collection data object.
     * @param  {Object}   [options={}]            The options object.
     * @param  {Object}   [options.headers]       The headers object option.
     * @param  {Number}   [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean}  [options.safe]          The safe option.
     * @param  {Boolean}  [options.patch]         The patch option.
     * @param  {Number}   [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.setData = function (data, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var patch, permissions, last_modified, path, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(data)) {
                    throw new Error("A collection object is required.");
                }
                patch = options.patch, permissions = options.permissions;
                last_modified = __assign({}, data, options).last_modified;
                path = endpoint_1.default.collection(this.bucket.name, this.name);
                request = requests.updateRequest(path, { data: data, permissions: permissions }, {
                    last_modified: last_modified,
                    patch: patch,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Retrieves the list of permissions for this collection.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.getPermissions = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request, permissions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = endpoint_1.default.collection(this.bucket.name, this.name);
                        request = { headers: this._getHeaders(options), path: path };
                        return [4 /*yield*/, this.client.execute(request, {
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        permissions = (_a.sent()).permissions;
                        return [2 /*return*/, permissions];
                }
            });
        });
    };
    /**
     * Replaces all existing collection permissions with the ones provided.
     *
     * @param  {Object}   permissions             The permissions object.
     * @param  {Object}   [options={}]            The options object
     * @param  {Object}   [options.headers]       The headers object option.
     * @param  {Number}   [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean}  [options.safe]          The safe option.
     * @param  {Number}   [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.setPermissions = function (permissions, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, data, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(permissions)) {
                    throw new Error("A permissions object is required.");
                }
                path = endpoint_1.default.collection(this.bucket.name, this.name);
                data = { last_modified: options.last_modified };
                request = requests.updateRequest(path, { data: data, permissions: permissions }, {
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Append principals to the collection permissions.
     *
     * @param  {Object}  permissions             The permissions object.
     * @param  {Object}  [options={}]            The options object
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Object}  [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.addPermissions = function (permissions, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, last_modified, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(permissions)) {
                    throw new Error("A permissions object is required.");
                }
                path = endpoint_1.default.collection(this.bucket.name, this.name);
                last_modified = options.last_modified;
                request = requests.jsonPatchPermissionsRequest(path, permissions, "add", {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Remove principals from the collection permissions.
     *
     * @param  {Object}  permissions             The permissions object.
     * @param  {Object}  [options={}]            The options object
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Object}  [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.removePermissions = function (permissions, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, last_modified, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(permissions)) {
                    throw new Error("A permissions object is required.");
                }
                path = endpoint_1.default.collection(this.bucket.name, this.name);
                last_modified = options.last_modified;
                request = requests.jsonPatchPermissionsRequest(path, permissions, "remove", {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Creates a record in current collection.
     *
     * @param  {Object}  record                The record to create.
     * @param  {Object}  [options={}]          The options object.
     * @param  {Object}  [options.headers]     The headers object option.
     * @param  {Number}  [options.retry=0]     Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean} [options.safe]        The safe option.
     * @param  {Object}  [options.permissions] The permissions option.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.createRecord = function (record, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var permissions, path, request;
            return __generator(this, function (_a) {
                permissions = options.permissions;
                path = endpoint_1.default.record(this.bucket.name, this.name, record.id);
                request = requests.createRequest(path, { data: record, permissions: permissions }, {
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Adds an attachment to a record, creating the record when it doesn't exist.
     *
     * @param  {String}  dataURL                 The data url.
     * @param  {Object}  [record={}]             The record data.
     * @param  {Object}  [options={}]            The options object.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Number}  [options.last_modified] The last_modified option.
     * @param  {Object}  [options.permissions]   The permissions option.
     * @param  {String}  [options.filename]      Force the attachment filename.
     * @param  {String}  [options.gzipped]       Force the attachment to be gzipped or not.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.addAttachment = function (dataURI, record, options) {
        if (record === void 0) { record = {}; }
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var permissions, id, path, last_modified, addAttachmentRequest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        permissions = options.permissions;
                        id = record.id || v4_1.default();
                        path = endpoint_1.default.attachment(this.bucket.name, this.name, id);
                        last_modified = __assign({}, record, options).last_modified;
                        addAttachmentRequest = requests.addAttachmentRequest(path, dataURI, { data: record, permissions: permissions }, {
                            last_modified: last_modified,
                            filename: options.filename,
                            gzipped: options.gzipped,
                            headers: this._getHeaders(options),
                            safe: this._getSafe(options),
                        });
                        return [4 /*yield*/, this.client.execute(addAttachmentRequest, {
                                stringify: false,
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.getRecord(id)];
                }
            });
        });
    };
    /**
     * Removes an attachment from a given record.
     *
     * @param  {Object}  recordId                The record id.
     * @param  {Object}  [options={}]            The options object.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Number}  [options.last_modified] The last_modified option.
     */
    Collection.prototype.removeAttachment = function (recordId, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var last_modified, path, request;
            return __generator(this, function (_a) {
                last_modified = options.last_modified;
                path = endpoint_1.default.attachment(this.bucket.name, this.name, recordId);
                request = requests.deleteRequest(path, {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Updates a record in current collection.
     *
     * @param  {Object}  record                  The record to update.
     * @param  {Object}  [options={}]            The options object.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Number}  [options.last_modified] The last_modified option.
     * @param  {Object}  [options.permissions]   The permissions option.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.updateRecord = function (record, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var permissions, last_modified, path, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(record)) {
                    throw new Error("A record object is required.");
                }
                if (!record.id) {
                    throw new Error("A record id is required.");
                }
                permissions = options.permissions;
                last_modified = __assign({}, record, options).last_modified;
                path = endpoint_1.default.record(this.bucket.name, this.name, record.id);
                request = requests.updateRequest(path, { data: record, permissions: permissions }, {
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                    last_modified: last_modified,
                    patch: !!options.patch,
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Deletes a record from the current collection.
     *
     * @param  {Object|String} record                  The record to delete.
     * @param  {Object}        [options={}]            The options object.
     * @param  {Object}        [options.headers]       The headers object option.
     * @param  {Number}        [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean}       [options.safe]          The safe option.
     * @param  {Number}        [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.deleteRecord = function (record, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var recordObj, id, last_modified, path, request;
            return __generator(this, function (_a) {
                recordObj = utils_1.toDataBody(record);
                if (!recordObj.id) {
                    throw new Error("A record id is required.");
                }
                id = recordObj.id;
                last_modified = __assign({}, recordObj, options).last_modified;
                path = endpoint_1.default.record(this.bucket.name, this.name, id);
                request = requests.deleteRequest(path, {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Retrieves a record from the current collection.
     *
     * @param  {String} id                The record id to retrieve.
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Object} [options.query]   Query parameters to pass in
     *     the request. This might be useful for features that aren't
     *     yet supported by this library.
     * @param  {Array}  [options.fields]  Limit response to
     *     just some fields.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.getRecord = function (id, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request;
            return __generator(this, function (_a) {
                path = endpoint_1.default.record(this.bucket.name, this.name, id);
                path = utils_2.addEndpointOptions(path, options);
                request = { headers: this._getHeaders(options), path: path };
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Lists records from the current collection.
     *
     * Sorting is done by passing a `sort` string option:
     *
     * - The field to order the results by, prefixed with `-` for descending.
     * Default: `-last_modified`.
     *
     * @see http://kinto.readthedocs.io/en/stable/api/1.x/sorting.html
     *
     * Filtering is done by passing a `filters` option object:
     *
     * - `{fieldname: "value"}`
     * - `{min_fieldname: 4000}`
     * - `{in_fieldname: "1,2,3"}`
     * - `{not_fieldname: 0}`
     * - `{exclude_fieldname: "0,1"}`
     *
     * @see http://kinto.readthedocs.io/en/stable/api/1.x/filtering.html
     *
     * Paginating is done by passing a `limit` option, then calling the `next()`
     * method from the resolved result object to fetch the next page, if any.
     *
     * @param  {Object}   [options={}]                    The options object.
     * @param  {Object}   [options.headers]               The headers object option.
     * @param  {Number}   [options.retry=0]               Number of retries to make
     *     when faced with transient errors.
     * @param  {Object}   [options.filters={}]            The filters object.
     * @param  {String}   [options.sort="-last_modified"] The sort field.
     * @param  {String}   [options.at]                    The timestamp to get a snapshot at.
     * @param  {String}   [options.limit=null]            The limit field.
     * @param  {String}   [options.pages=1]               The number of result pages to aggregate.
     * @param  {Number}   [options.since=null]            Only retrieve records modified since the provided timestamp.
     * @param  {Array}    [options.fields]                Limit response to just some fields.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.listRecords = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                path = endpoint_1.default.record(this.bucket.name, this.name);
                if (Object.prototype.hasOwnProperty.call(options, "at")) {
                    return [2 /*return*/, this.getSnapshot(options.at)];
                }
                else {
                    return [2 /*return*/, this.client.paginatedList(path, options, {
                            headers: this._getHeaders(options),
                            retry: this._getRetry(options),
                        })];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * @private
     */
    Collection.prototype.isHistoryComplete = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, oldestHistoryEntry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.bucket.listHistory({
                            limit: 1,
                            filters: {
                                action: "create",
                                resource_name: "collection",
                                collection_id: this.name,
                            },
                        })];
                    case 1:
                        _a = __read.apply(void 0, [(_b.sent()).data, 1]), oldestHistoryEntry = _a[0];
                        return [2 /*return*/, !!oldestHistoryEntry];
                }
            });
        });
    };
    /**
     * @private
     */
    Collection.prototype.listChangesBackTo = function (at) {
        return __awaiter(this, void 0, void 0, function () {
            var changes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isHistoryComplete()];
                    case 1:
                        // Ensure we have enough history data to retrieve the complete list of
                        // changes.
                        if (!(_a.sent())) {
                            throw new Error("Computing a snapshot is only possible when the full history for a " +
                                "collection is available. Here, the history plugin seems to have " +
                                "been enabled after the creation of the collection.");
                        }
                        return [4 /*yield*/, this.bucket.listHistory({
                                pages: Infinity,
                                sort: "-target.data.last_modified",
                                filters: {
                                    resource_name: "record",
                                    collection_id: this.name,
                                    "max_target.data.last_modified": String(at),
                                },
                            })];
                    case 2:
                        changes = (_a.sent()).data;
                        return [2 /*return*/, changes];
                }
            });
        });
    };
    /**
     * @private
     */
    Collection.prototype.getSnapshot = function (at) {
        return __awaiter(this, void 0, void 0, function () {
            var changes, seenIds, snapshot, _loop_1, changes_1, changes_1_1, _a, action, record;
            var e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!Number.isInteger(at) || at <= 0) {
                            throw new Error("Invalid argument, expected a positive integer.");
                        }
                        return [4 /*yield*/, this.listChangesBackTo(at)];
                    case 1:
                        changes = _c.sent();
                        seenIds = new Set();
                        snapshot = [];
                        _loop_1 = function (action, record) {
                            if (action == "delete") {
                                seenIds.add(record.id); // ensure not reprocessing deleted entries
                                snapshot = snapshot.filter(function (r) { return r.id !== record.id; });
                            }
                            else if (!seenIds.has(record.id)) {
                                seenIds.add(record.id);
                                snapshot.push(record);
                            }
                        };
                        try {
                            for (changes_1 = __values(changes), changes_1_1 = changes_1.next(); !changes_1_1.done; changes_1_1 = changes_1.next()) {
                                _a = changes_1_1.value, action = _a.action, record = _a.target.data;
                                _loop_1(action, record);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (changes_1_1 && !changes_1_1.done && (_b = changes_1.return)) _b.call(changes_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return [2 /*return*/, {
                                last_modified: String(at),
                                data: snapshot.sort(function (a, b) { return b.last_modified - a.last_modified; }),
                                next: function () {
                                    throw new Error("Snapshots don't support pagination");
                                },
                                hasNextPage: false,
                                totalRecords: snapshot.length,
                            }];
                }
            });
        });
    };
    /**
     * Performs batch operations at the current collection level.
     *
     * @param  {Function} fn                   The batch operation function.
     * @param  {Object}   [options={}]         The options object.
     * @param  {Object}   [options.headers]    The headers object option.
     * @param  {Boolean}  [options.safe]       The safe option.
     * @param  {Number}   [options.retry]      The retry option.
     * @param  {Boolean}  [options.aggregate]  Produces a grouped result object.
     * @return {Promise<Object, Error>}
     */
    Collection.prototype.batch = function (fn, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.client.batch(fn, {
                        bucket: this.bucket.name,
                        collection: this.name,
                        headers: this._getHeaders(options),
                        retry: this._getRetry(options),
                        safe: this._getSafe(options),
                        aggregate: !!options.aggregate,
                    })];
            });
        });
    };
    __decorate([
        utils_1.capable(["attachments"])
    ], Collection.prototype, "addAttachment", null);
    __decorate([
        utils_1.capable(["attachments"])
    ], Collection.prototype, "removeAttachment", null);
    __decorate([
        utils_1.capable(["history"])
    ], Collection.prototype, "getSnapshot", null);
    return Collection;
}());
exports.default = Collection;
