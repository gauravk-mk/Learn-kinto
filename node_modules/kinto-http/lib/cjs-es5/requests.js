"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var requestDefaults = {
    safe: false,
    // check if we should set default content type here
    headers: {},
    permissions: undefined,
    data: undefined,
    patch: false,
};
/**
 * @private
 */
function safeHeader(safe, last_modified) {
    if (!safe) {
        return {};
    }
    if (last_modified) {
        return { "If-Match": "\"" + last_modified + "\"" };
    }
    return { "If-None-Match": "*" };
}
/**
 * @private
 */
function createRequest(path, _a, options) {
    var data = _a.data, permissions = _a.permissions;
    if (options === void 0) { options = {}; }
    var _b = __assign({}, requestDefaults, options), headers = _b.headers, safe = _b.safe;
    var method = options.method || (data && data.id) ? "PUT" : "POST";
    return {
        method: method,
        path: path,
        headers: __assign({}, headers, safeHeader(safe)),
        body: { data: data, permissions: permissions },
    };
}
exports.createRequest = createRequest;
/**
 * @private
 */
function updateRequest(path, _a, options) {
    var data = _a.data, permissions = _a.permissions;
    if (options === void 0) { options = {}; }
    var _b = __assign({}, requestDefaults, options), headers = _b.headers, safe = _b.safe, patch = _b.patch;
    var last_modified = __assign({}, data, options).last_modified;
    var hasNoData = data &&
        Object.keys(data).filter(function (k) { return k !== "id" && k !== "last_modified"; })
            .length === 0;
    if (hasNoData) {
        data = undefined;
    }
    return {
        method: patch ? "PATCH" : "PUT",
        path: path,
        headers: __assign({}, headers, safeHeader(safe, last_modified)),
        body: { data: data, permissions: permissions },
    };
}
exports.updateRequest = updateRequest;
/**
 * @private
 */
function jsonPatchPermissionsRequest(path, permissions, opType, options) {
    var e_1, _a, e_2, _b;
    if (options === void 0) { options = {}; }
    var _c = __assign({}, requestDefaults, options), headers = _c.headers, safe = _c.safe, last_modified = _c.last_modified;
    var ops = [];
    try {
        for (var _d = __values(Object.entries(permissions)), _e = _d.next(); !_e.done; _e = _d.next()) {
            var _f = __read(_e.value, 2), type = _f[0], principals = _f[1];
            if (principals) {
                try {
                    for (var principals_1 = (e_2 = void 0, __values(principals)), principals_1_1 = principals_1.next(); !principals_1_1.done; principals_1_1 = principals_1.next()) {
                        var principal = principals_1_1.value;
                        ops.push({
                            op: opType,
                            path: "/permissions/" + type + "/" + principal,
                        });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (principals_1_1 && !principals_1_1.done && (_b = principals_1.return)) _b.call(principals_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        method: "PATCH",
        path: path,
        headers: __assign({}, headers, safeHeader(safe, last_modified), { "Content-Type": "application/json-patch+json" }),
        body: ops,
    };
}
exports.jsonPatchPermissionsRequest = jsonPatchPermissionsRequest;
/**
 * @private
 */
function deleteRequest(path, options) {
    if (options === void 0) { options = {}; }
    var _a = __assign({}, requestDefaults, options), headers = _a.headers, safe = _a.safe, last_modified = _a.last_modified;
    if (safe && !last_modified) {
        throw new Error("Safe concurrency check requires a last_modified value.");
    }
    return {
        method: "DELETE",
        path: path,
        headers: __assign({}, headers, safeHeader(safe, last_modified)),
    };
}
exports.deleteRequest = deleteRequest;
/**
 * @private
 */
function addAttachmentRequest(path, dataURI, _a, options) {
    var _b = _a === void 0 ? {} : _a, data = _b.data, permissions = _b.permissions;
    if (options === void 0) { options = {}; }
    var _c = __assign({}, requestDefaults, options), headers = _c.headers, safe = _c.safe, gzipped = _c.gzipped;
    var last_modified = __assign({}, data, options).last_modified;
    var body = { data: data, permissions: permissions };
    var formData = utils_1.createFormData(dataURI, body, options);
    var customPath = "" + path + (gzipped !== null ? "?gzipped=" + (gzipped ? "true" : "false") : "");
    return {
        method: "POST",
        path: customPath,
        headers: __assign({}, headers, safeHeader(safe, last_modified)),
        body: formData,
    };
}
exports.addAttachmentRequest = addAttachmentRequest;
