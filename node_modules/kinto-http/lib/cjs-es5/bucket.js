"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var collection_1 = __importDefault(require("./collection"));
var requests = __importStar(require("./requests"));
var endpoint_1 = __importDefault(require("./endpoint"));
/**
 * Abstract representation of a selected bucket.
 *
 */
var Bucket = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param  {KintoClient} client            The client instance.
     * @param  {String}      name              The bucket name.
     * @param  {Object}      [options={}]      The headers object option.
     * @param  {Object}      [options.headers] The headers object option.
     * @param  {Boolean}     [options.safe]    The safe option.
     * @param  {Number}      [options.retry]   The retry option.
     * @param  {boolean}     [options.batch]   The batch option.
     */
    function Bucket(client, name, options) {
        if (options === void 0) { options = {}; }
        /**
         * @ignore
         */
        this.client = client;
        /**
         * The bucket name.
         * @type {String}
         */
        this.name = name;
        /**
         * @ignore
         */
        this._isBatch = !!options.batch;
        /**
         * @ignore
         */
        this._headers = options.headers || {};
        this._retry = options.retry || 0;
        this._safe = !!options.safe;
    }
    /**
     * Get the value of "headers" for a given request, merging the
     * per-request headers with our own "default" headers.
     *
     * @private
     */
    Bucket.prototype._getHeaders = function (options) {
        return __assign({}, this._headers, options.headers);
    };
    /**
     * Get the value of "safe" for a given request, using the
     * per-request option if present or falling back to our default
     * otherwise.
     *
     * @private
     * @param {Object} options The options for a request.
     * @returns {Boolean}
     */
    Bucket.prototype._getSafe = function (options) {
        return __assign({ safe: this._safe }, options).safe;
    };
    /**
     * As _getSafe, but for "retry".
     *
     * @private
     */
    Bucket.prototype._getRetry = function (options) {
        return __assign({ retry: this._retry }, options).retry;
    };
    /**
     * Selects a collection.
     *
     * @param  {String}  name              The collection name.
     * @param  {Object}  [options={}]      The options object.
     * @param  {Object}  [options.headers] The headers object option.
     * @param  {Boolean} [options.safe]    The safe option.
     * @return {Collection}
     */
    Bucket.prototype.collection = function (name, options) {
        if (options === void 0) { options = {}; }
        return new collection_1.default(this.client, this, name, {
            batch: this._isBatch,
            headers: this._getHeaders(options),
            retry: this._getRetry(options),
            safe: this._getSafe(options),
        });
    };
    /**
     * Retrieves the ETag of the collection list, for use with the `since` filtering option.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<String, Error>}
     */
    Bucket.prototype.getCollectionsTimestamp = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = endpoint_1.default.collection(this.name);
                        request = {
                            headers: this._getHeaders(options),
                            path: path,
                            method: "HEAD",
                        };
                        return [4 /*yield*/, this.client.execute(request, {
                                raw: true,
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        headers = (_a.sent()).headers;
                        return [2 /*return*/, headers.get("ETag")];
                }
            });
        });
    };
    /**
     * Retrieves the ETag of the group list, for use with the `since` filtering option.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<String, Error>}
     */
    Bucket.prototype.getGroupsTimestamp = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request, headers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = endpoint_1.default.group(this.name);
                        request = {
                            headers: this._getHeaders(options),
                            path: path,
                            method: "HEAD",
                        };
                        return [4 /*yield*/, this.client.execute(request, {
                                raw: true,
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        headers = (_a.sent()).headers;
                        return [2 /*return*/, headers.get("ETag")];
                }
            });
        });
    };
    /**
     * Retrieves bucket data.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Object} [options.query]   Query parameters to pass in
     *     the request. This might be useful for features that aren't
     *     yet supported by this library.
     * @param  {Array}  [options.fields]  Limit response to
     *     just some fields.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.getData = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        path = endpoint_1.default.bucket(this.name);
                        path = utils_1.addEndpointOptions(path, options);
                        request = {
                            headers: this._getHeaders(options),
                            path: path,
                        };
                        return [4 /*yield*/, this.client.execute(request, {
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Set bucket data.
     * @param  {Object}  data                    The bucket data object.
     * @param  {Object}  [options={}]            The options object.
     * @param  {Object}  [options.headers={}]    The headers object option.
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean} [options.patch]         The patch option.
     * @param  {Number}  [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.setData = function (data, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var bucket, bucketId, path, patch, permissions, last_modified, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(data)) {
                    throw new Error("A bucket object is required.");
                }
                bucket = __assign({}, data, { id: this.name });
                bucketId = bucket.id;
                if (bucket.id === "default") {
                    delete bucket.id;
                }
                path = endpoint_1.default.bucket(bucketId);
                patch = options.patch, permissions = options.permissions;
                last_modified = __assign({}, data, options).last_modified;
                request = requests.updateRequest(path, { data: bucket, permissions: permissions }, {
                    last_modified: last_modified,
                    patch: patch,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Retrieves the list of history entries in the current bucket.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Array<Object>, Error>}
     */
    Bucket.prototype.listHistory = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                path = endpoint_1.default.history(this.name);
                return [2 /*return*/, this.client.paginatedList(path, options, {
                        headers: this._getHeaders(options),
                        retry: this._getRetry(options),
                    })];
            });
        });
    };
    /**
     * Retrieves the list of collections in the current bucket.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.filters={}] The filters object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @param  {Array}  [options.fields]  Limit response to
     *     just some fields.
     * @return {Promise<Array<Object>, Error>}
     */
    Bucket.prototype.listCollections = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                path = endpoint_1.default.collection(this.name);
                return [2 /*return*/, this.client.paginatedList(path, options, {
                        headers: this._getHeaders(options),
                        retry: this._getRetry(options),
                    })];
            });
        });
    };
    /**
     * Creates a new collection in current bucket.
     *
     * @param  {String|undefined}  id          The collection id.
     * @param  {Object}  [options={}]          The options object.
     * @param  {Boolean} [options.safe]        The safe option.
     * @param  {Object}  [options.headers]     The headers object option.
     * @param  {Number}  [options.retry=0]     Number of retries to make
     *     when faced with transient errors.
     * @param  {Object}  [options.permissions] The permissions object.
     * @param  {Object}  [options.data]        The data object.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.createCollection = function (id, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var permissions, _a, data, path, request;
            return __generator(this, function (_b) {
                permissions = options.permissions, _a = options.data, data = _a === void 0 ? {} : _a;
                data.id = id;
                path = endpoint_1.default.collection(this.name, id);
                request = requests.createRequest(path, { data: data, permissions: permissions }, {
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Deletes a collection from the current bucket.
     *
     * @param  {Object|String} collection              The collection to delete.
     * @param  {Object}        [options={}]            The options object.
     * @param  {Object}        [options.headers]       The headers object option.
     * @param  {Number}        [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean}       [options.safe]          The safe option.
     * @param  {Number}        [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.deleteCollection = function (collection, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var collectionObj, id, last_modified, path, request;
            return __generator(this, function (_a) {
                collectionObj = utils_1.toDataBody(collection);
                if (!collectionObj.id) {
                    throw new Error("A collection id is required.");
                }
                id = collectionObj.id;
                last_modified = __assign({}, collectionObj, options).last_modified;
                path = endpoint_1.default.collection(this.name, id);
                request = requests.deleteRequest(path, {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Retrieves the list of groups in the current bucket.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.filters={}] The filters object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @param  {Array}  [options.fields]  Limit response to
     *     just some fields.
     * @return {Promise<Array<Object>, Error>}
     */
    Bucket.prototype.listGroups = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path;
            return __generator(this, function (_a) {
                path = endpoint_1.default.group(this.name);
                return [2 /*return*/, this.client.paginatedList(path, options, {
                        headers: this._getHeaders(options),
                        retry: this._getRetry(options),
                    })];
            });
        });
    };
    /**
     * Fetches a group in current bucket.
     *
     * @param  {String} id                The group id.
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @param  {Object} [options.query]   Query parameters to pass in
     *     the request. This might be useful for features that aren't
     *     yet supported by this library.
     * @param  {Array}  [options.fields]  Limit response to
     *     just some fields.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.getGroup = function (id, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, request;
            return __generator(this, function (_a) {
                path = endpoint_1.default.group(this.name, id);
                path = utils_1.addEndpointOptions(path, options);
                request = {
                    headers: this._getHeaders(options),
                    path: path,
                };
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Creates a new group in current bucket.
     *
     * @param  {String|undefined}  id                    The group id.
     * @param  {Array<String>}     [members=[]]          The list of principals.
     * @param  {Object}            [options={}]          The options object.
     * @param  {Object}            [options.data]        The data object.
     * @param  {Object}            [options.permissions] The permissions object.
     * @param  {Boolean}           [options.safe]        The safe option.
     * @param  {Object}            [options.headers]     The headers object option.
     * @param  {Number}            [options.retry=0]     Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.createGroup = function (id, members, options) {
        if (members === void 0) { members = []; }
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var data, path, permissions, request;
            return __generator(this, function (_a) {
                data = __assign({}, options.data, { id: id,
                    members: members });
                path = endpoint_1.default.group(this.name, id);
                permissions = options.permissions;
                request = requests.createRequest(path, { data: data, permissions: permissions }, {
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Updates an existing group in current bucket.
     *
     * @param  {Object}  group                   The group object.
     * @param  {Object}  [options={}]            The options object.
     * @param  {Object}  [options.data]          The data object.
     * @param  {Object}  [options.permissions]   The permissions object.
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Number}  [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.updateGroup = function (group, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var data, path, patch, permissions, last_modified, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(group)) {
                    throw new Error("A group object is required.");
                }
                if (!group.id) {
                    throw new Error("A group id is required.");
                }
                data = __assign({}, options.data, group);
                path = endpoint_1.default.group(this.name, group.id);
                patch = options.patch, permissions = options.permissions;
                last_modified = __assign({}, data, options).last_modified;
                request = requests.updateRequest(path, { data: data, permissions: permissions }, {
                    last_modified: last_modified,
                    patch: patch,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Deletes a group from the current bucket.
     *
     * @param  {Object|String} group                   The group to delete.
     * @param  {Object}        [options={}]            The options object.
     * @param  {Object}        [options.headers]       The headers object option.
     * @param  {Number}        [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Boolean}       [options.safe]          The safe option.
     * @param  {Number}        [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.deleteGroup = function (group, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var groupObj, id, last_modified, path, request;
            return __generator(this, function (_a) {
                groupObj = utils_1.toDataBody(group);
                id = groupObj.id;
                last_modified = __assign({}, groupObj, options).last_modified;
                path = endpoint_1.default.group(this.name, id);
                request = requests.deleteRequest(path, {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Retrieves the list of permissions for this bucket.
     *
     * @param  {Object} [options={}]      The options object.
     * @param  {Object} [options.headers] The headers object option.
     * @param  {Number} [options.retry=0] Number of retries to make
     *     when faced with transient errors.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.getPermissions = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var request, permissions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            headers: this._getHeaders(options),
                            path: endpoint_1.default.bucket(this.name),
                        };
                        return [4 /*yield*/, this.client.execute(request, {
                                retry: this._getRetry(options),
                            })];
                    case 1:
                        permissions = (_a.sent()).permissions;
                        return [2 /*return*/, permissions];
                }
            });
        });
    };
    /**
     * Replaces all existing bucket permissions with the ones provided.
     *
     * @param  {Object}  permissions             The permissions object.
     * @param  {Object}  [options={}]            The options object
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Object}  [options.headers={}]    The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Object}  [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.setPermissions = function (permissions, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, last_modified, data, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(permissions)) {
                    throw new Error("A permissions object is required.");
                }
                path = endpoint_1.default.bucket(this.name);
                last_modified = options.last_modified;
                data = { last_modified: last_modified };
                request = requests.updateRequest(path, { data: data, permissions: permissions }, {
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Append principals to the bucket permissions.
     *
     * @param  {Object}  permissions             The permissions object.
     * @param  {Object}  [options={}]            The options object
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Object}  [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.addPermissions = function (permissions, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, last_modified, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(permissions)) {
                    throw new Error("A permissions object is required.");
                }
                path = endpoint_1.default.bucket(this.name);
                last_modified = options.last_modified;
                request = requests.jsonPatchPermissionsRequest(path, permissions, "add", {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Remove principals from the bucket permissions.
     *
     * @param  {Object}  permissions             The permissions object.
     * @param  {Object}  [options={}]            The options object
     * @param  {Boolean} [options.safe]          The safe option.
     * @param  {Object}  [options.headers]       The headers object option.
     * @param  {Number}  [options.retry=0]       Number of retries to make
     *     when faced with transient errors.
     * @param  {Object}  [options.last_modified] The last_modified option.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.removePermissions = function (permissions, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var path, last_modified, request;
            return __generator(this, function (_a) {
                if (!utils_1.isObject(permissions)) {
                    throw new Error("A permissions object is required.");
                }
                path = endpoint_1.default.bucket(this.name);
                last_modified = options.last_modified;
                request = requests.jsonPatchPermissionsRequest(path, permissions, "remove", {
                    last_modified: last_modified,
                    headers: this._getHeaders(options),
                    safe: this._getSafe(options),
                });
                return [2 /*return*/, this.client.execute(request, { retry: this._getRetry(options) })];
            });
        });
    };
    /**
     * Performs batch operations at the current bucket level.
     *
     * @param  {Function} fn                   The batch operation function.
     * @param  {Object}   [options={}]         The options object.
     * @param  {Object}   [options.headers]    The headers object option.
     * @param  {Boolean}  [options.safe]       The safe option.
     * @param  {Number}   [options.retry=0]    The retry option.
     * @param  {Boolean}  [options.aggregate]  Produces a grouped result object.
     * @return {Promise<Object, Error>}
     */
    Bucket.prototype.batch = function (fn, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.client.batch(fn, {
                        bucket: this.name,
                        headers: this._getHeaders(options),
                        retry: this._getRetry(options),
                        safe: this._getSafe(options),
                        aggregate: !!options.aggregate,
                    })];
            });
        });
    };
    __decorate([
        utils_1.capable(["history"])
    ], Bucket.prototype, "listHistory", null);
    return Bucket;
}());
exports.default = Bucket;
